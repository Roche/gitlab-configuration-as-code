name: CI/CD
on:
  push:
    branches:
      - master
    tags:
      - '*'
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches:
      - '*'

jobs:
  cleanup-runs:
    name: Cleanup previous runs
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Tox
        run: pip install tox
      - name: Run linter
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Tox
        run: pip install tox
      - name: Run tests
        run: tox -e py
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v1
        if: ${{ github.event.pull_request }}
        with:
          report_paths: './out.report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittest 
          env_vars: PYTHON_VERSION
#          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build and publish to PyPi
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Build Python package
        run: make build
      - name: Publish package
        if: contains(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: make publish

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: ${{ github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/') }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract Docker metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: hoffmannlaroche/gcasc
          tag-semver: |
            {{major}}
            {{major}}.{{minor}}
            {{major}}.{{minor}}.{{patch}}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/') }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

